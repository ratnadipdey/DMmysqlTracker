-- 487
ALTER TABLE attachment
ADD MEDIALINK                    VARCHAR(4000) ,
ADD MEDIAFILENAME                VARCHAR(500)  ,
ADD TARGETMEDIALINK              VARCHAR(4000) ,
ADD TARGETMEDIAFILENAME          VARCHAR(500);

-- 503
DELIMITER $$
create function OFFER_CATEGORY (wo_number bigint)
returns VARCHAR(80)
READS SQL DATA
BEGIN
  declare category VARCHAR(80);
  select OFFERCATEGORY into category from offer where (workorderid=wo_number or secondworkorderid=wo_number) and status= 'New';
    return category;    
END $$
DELIMITER ;

DELIMITER $$
create function OFFER_CHECK (wo_number bigint)
returns VARCHAR(80)
READS SQL DATA
BEGIN
  declare cnt bigint;
  select count(*) into cnt from offer where (workorderid=wo_number or secondworkorderid=wo_number) and status= 'New';
    if cnt=0 then
      RETURN 'No';
    else 
      RETURN 'Yes';
    end if;  
END $$
DELIMITER ;

CREATE OR REPLACE VIEW `VWADVANCEDFILTER` (`WORKORDERID`, `WORKORDERNUMBER`, `ORIGINATOR`, `RECEIVER`, `ORIGINATORNAME`, `RECEIVERNAME`, `BILLOFLADING`, `BOOKINGNUMBER`, `CATEGORY`, `CATEGORYTYPE`, `STATUS`, `WORKORDERDATE`, `DATECREATED`, `EXPORTCUTOFFDATE`, `SOURCE`, `VESSEL`, `VOYAGE`, `CUTTOFFDATE`, `PORTOFLOADING`, `PORTOFDISCHARGE`, `ORIGINNAME`, `ORIGINCITY`, `DESTINATIONNAME`, `DESTINATIONCITY`, `EQUIPMENTNUMBER`, `LASTFREEDAY`, `RESPONDBYDATE`, `CREATEDBY`, `ASSIGNEDBY`, `EQUIPMENTTYPECODE`, `ORIGINATORID`, `ETA`, `CATEGORYTRIP`, `OFFERPENDING`, `OFFERCATEGORY`, `ISATTACHMENT`, `CARRIERCODE`, `ORIGINZIP`, `DESTINATIONZIP`, `EQUIPMENTCLASS`, `RECEIVERID`, `SHIPMENTREFERENCENUMBER`) AS 
  SELECT wo.workorderid workorderid,
wo.workordernumber workordernumber,
wo.originatorid originator,
wo.receiverid receiver,
wo.originatorname originatorname,
wo.receivername receivername,
wo.billofladingnumber billoflading,
wo.bookingnumber bookingnumber,
cat.NAME CATEGORY,
catt.description categorytype,
st.description status,
wo.workorderdate workorderdate,
wo.datecreated datecreated,
wo.exportcutoffdate exportcutoffdate,
wo.SOURCE SOURCE,
wo.vessel vessel,
wo.voyage voyage,
wo.exportcutoffdate cuttoffdate,
wo.portofloading portofloading,
wo.portofdischarge portofdischarge,
wol.originname originname,
wol.origincity origincity,
wol.destinationname destinationname,
wol.destinationcity destinationcity,
wol.equipmentnumbers equipmentnumber,
wo.lastfreeday lastfreeday,
wo.respondbydate respondbydate,
wo.createdby createdby,
wo.assignedby assignedby,
WOL.EQUIPMENTTYPECODES EQUIPMENTTYPECODE,
wo.originatorid originatorid,
wo.eta eta,
catp.description categorytrip,
OFFER_CHECK(wo.workorderid) as OFFERPENDING,
OFFER_CATEGORY(wo.workorderid) as OFFERCATEGORY,
wol.ISATTACHMENT ISATTACHMENT,
wo.CARRIERCODE CARRIERCODE,
wol.ORIGINZIP ORIGINZIP,
wol.DESTINATIONZIP DESTINATIONZIP,
wol.EQUIPMENTCLASS EQUIPMENTCLASS,
wo.RECEIVERID RECEIVERID,
wo.SHIPMENTREFERENCENUMBER SHIPMENTREFERENCENUMBER
FROM
	workorder wo
left join workorderlookup wol on wo.workorderid = wol.workorderid
left join status st on wo.statusid = st.statusid
left join CATEGORY cat on cat.ID = wo.categoryid
left join categorytype catt on cat.TYPE = catt.ID
left join partnership p on wo.ORIGINATORID = p.organization_dbid and wo.RECEIVERID = p.organization_partner_dbid
left join categorytrip catp on cat.TRIP = catp.ID
ORDER BY wo.workordernumber;

-- 505
ALTER TABLE equipmentonworkorder ADD REEFERTEMP double(9,2);
ALTER TABLE equipmentonworkorder ADD REEFERTEMPUNIT VARCHAR(2);
ALTER TABLE X_EQUIPMENTONWORKORDER ADD REEFERTEMP double(9,2);
ALTER TABLE X_EQUIPMENTONWORKORDER ADD REEFERTEMPUNIT VARCHAR(2);

-- 506
ALTER TABLE workorderlookup ADD (comments VARCHAR(4000), emptyreleasenumber VARCHAR(50));

-- 515
drop procedure if exists proc_upd_wolkup1;
DELIMITER $$
create PROCEDURE  proc_upd_wolkup1()  
	BEGIN 
		DECLARE mWorkOrderId bigint;
		declare mComments varchar(4000);
		DECLARE V_FINAL_OUTPUT VARCHAR(40);
		DECLARE WORKORDERLKUP_UPD_CURSOR CURSOR FOR 
			select c1.workorderid, c1.comments from commentsonworkorder c1
            where c1.lastmodified = (
				SELECT min(c.lastmodified)
				FROM commentsonworkorder c 
                where c.lastmodified is not null and c.workorderid = c1.workorderid
			);
		declare exit handler for sqlexception select 'Error in generating data';
		DECLARE exit HANDLER FOR NOT FOUND

		OPEN WORKORDERLKUP_UPD_CURSOR;
		LOOP
			FETCH WORKORDERLKUP_UPD_CURSOR INTO mWorkOrderId, mComments;
			update workorderlookup set
				   comments = comments
				   where workorderid = workorderid;
		END LOOP;
		CLOSE WORKORDERLKUP_UPD_CURSOR;
		select 'Success';  
	END $$
DELIMITER ;

-- 516
drop procedure if exists proc_upd_wolkup2;
delimiter $$
create PROCEDURE proc_upd_wolkup2()
	begin
		declare mEmptyreleasenumber varchar(50);
        declare mWorkorderid bigint;
		declare WORKORDERLKUP_UPD_CURSOR cursor for
			select e1.workorderid, e1.emptyreleasenumber from equipmentonworkorder e1
            where e1.lastmodified = (
				SELECT min(e.lastmodified)
				FROM equipmentonworkorder e
                where e.lastmodified is not null and e.workorderid = e1.workorderid
			);
		declare exit handler for sqlexception select 'Error in generating data';
       
		OPEN WORKORDERLKUP_UPD_CURSOR;
		LOOP
			FETCH WORKORDERLKUP_UPD_CURSOR INTO mWorkorderid, mEmptyreleasenumber;
			update workorderlookup set
				emptyreleasenumber = mEmptyreleasenumber
				where workorderid = mWorkorderid;
         END LOOP;

		CLOSE WORKORDERLKUP_UPD_CURSOR;		
		select 'SUCCESSFUL';

	END $$
delimiter ;

-- 517
drop trigger if exists AFTR_EQUIPMENTONWO_INS_UPD;
DELIMITER $$
create TRIGGER AFTR_EQUIPMENTONWO_INS_UPD
	AFTER INSERT
	on EQUIPMENTONWORKORDER
	FOR EACH ROW
		BEgin
			DECLARE E_MSG VARCHAR(400);
			DECLARE V_EMPTYRELEASENUMBER VARCHAR(40);
			DECLARE V_EQUIPMENTONWOID DOUBLE;
            DECLARE EXIT HANDLER FOR SQLEXCEPTION SET E_MSG = 'SQLERRM';

			SELECT ifnull(min(equipmentonworkorderid),new.equipmentonworkorderid) into V_EQUIPMENTONWOID from equipmentonworkorder where workorderid = new.workorderid;
			
			IF (new.emptyreleasenumber IS NOT NULL and V_EQUIPMENTONWOID = new.equipmentonworkorderid) THEN
				UPDATE WORKORDERLOOKUP SET EMPTYRELEASENUMBER = NEW.EMPTYRELEASENUMBER where workorderid = new.workorderid;
			END IF; 
		END $$
DELIMITER ;

-- 518
drop trigger if exists AFTR_COMMENTONWO_INS_UPD;
DELIMITER $$
create TRIGGER AFTR_COMMENTONWO_INS_UPD
   AFTER INSERT  on COMMENTSONWORKORDER
   FOR EACH ROW
	BEGIN
       -- DECLARE pragma autonomous_transaction;
		DECLARE E_MSG VARCHAR(400);
        DECLARE V_COMMENTID DOUBLE;
        DECLARE EXIT HANDLER FOR SQLEXCEPTION SET E_MSG = 'SQLERRM';		

		select ifnull(min(commentid),NEW.COMMENTID) into V_COMMENTID FROM commentsonworkorder WHERE workorderid = new.workorderid;

		IF (NEW.COMMENTID = V_COMMENTID) THEN
			UPDATE WORKORDERLOOKUP SET COMMENTS = new.comments where workorderid = new.workorderid;
		END IF;
	END $$
DELIMITER ;

-- 519
Insert into AMENDWORKORDERSTATEDECIDER (ELEMENT_NAME,UNASSIGNED,ASSIGNED,ACCEPTED,REJECTED,CANCELLED,AMEND_BY_O,AMEND_BY_R,ACTIVE,COMPLETED,SOURCE_TYPE) values ('workorderDTO.equipmentWorkOrderDTO.reefertemp','NA','O','O','NA','NA','O','NA','O','O',null);
Insert into AMENDWORKORDERSTATEDECIDER (ELEMENT_NAME,UNASSIGNED,ASSIGNED,ACCEPTED,REJECTED,CANCELLED,AMEND_BY_O,AMEND_BY_R,ACTIVE,COMPLETED,SOURCE_TYPE) values ('workorderDTO.equipmentWorkOrderDTO.reefertempunit','NA','O','O','NA','NA','O','NA','O','O',null);

-- 520
drop trigger if exists ACTIVITYONWO_AFTER_INSERT;
DELIMITER $$
create TRIGGER ACTIVITYONWO_AFTER_INSERT
	after insert
	on ACTIVITYONWORKORDER
	FOR EACH ROW
		BEGIN
			DECLARE v_workorderid VARCHAR(4000)                 /* Use -meta option workorder.WORKORDERID%TYPE */;
			DECLARE v_event VARCHAR(4000)                         /* Use -meta option activityevents.EVENTID%TYPE */;
			DECLARE v_version                       SMALLINT;
			DECLARE e_msg                           VARCHAR(400);
			DECLARE step                            VARCHAR(30);
			DECLARE v_receiverid VARCHAR(4000)                    /* Use -meta option workorder.RECEIVERID%TYPE */;
			DECLARE temp1 varchar(4000);
			DECLARE act_count double;
			DECLARE WO_CREATED tinyint default 1;
			declare WO_ASSIGNED               tinyint default  2;
			declare WO_ACCEPTED               tinyint default  3;
			declare WO_REJECTED               tinyint default  4;
			declare WO_ACTIVE                 tinyint default  5;
			declare WO_COMPLETED              tinyint default  6;
			declare WO_AMENDED                tinyint default  7;
			declare WO_AMENDED_APROVED        tinyint default  8;
			declare WO_AMENDED_DCLINE         tinyint default  9;
			declare WO_CANCELED               tinyint default  10;
			declare WO_CANCELED_AKNWLG        tinyint default  11;
			declare WO_REASSIGNED             tinyint default  12;
			declare WO_UPDATED                tinyint default  13;
			declare WO_ROLLBACK_ACCEPT        tinyint default  19;
			declare WO_UNCOMMIT_EMPTY_RETURN  tinyint default  20;
            
            DECLARE EXIT HANDLER FOR SQLEXCEPTION SET e_msg = 'SQLERRM';

			SET v_workorderid = new.WORKORDERID; 
			SET v_event       = new.EVENTID;
			SET v_version     = new.VERSION;
			if  v_event = WO_CREATED OR
			v_event = WO_AMENDED OR
			v_event = WO_UPDATED OR
			v_event = WO_COMPLETED OR
			v_event = WO_ACTIVE OR
			v_event = WO_AMENDED_DCLINE OR
			v_event = WO_ROLLBACK_ACCEPT OR
			v_event = WO_UNCOMMIT_EMPTY_RETURN THEN
				SET step = 'X_WORKORDER';
				INSERT INTO X_WORKORDER(
				 WORKORDERID,
				 WORKORDERNUMBER,
				 ORIGINATORID,
				 RECEIVERID,
				 WORKORDERDATE,
				 VESSEL,
				 VOYAGE,
				 CARRIERCODE,
				 masterAirWayBillNumber,
				 houseAirWayBillNumber,
				 paymentMethodIndicator,
				 shipmentReferenceNumber,
				 originatorOnHandNumber,
				 originatorOrderReference,
				 originatorImportRefNumber,
				 ETA,
				 BILLOFLADINGNUMBER,
				 BOOKINGNUMBER,
				 RAILBILLINGNUMBER,
				 RECEIPTLOCATION,
				 LOADLOCATION,
				 DISCHARGELOCATION,
				 DESTINATIONLOCATION,
				 EXPORTCUTOFFDATE,
				 LASTFREEDAY,
				 BROKER,
				 SHIPPER,
				 RESPONDBYDATE,
				 SOURCE,
				 CATEGORY,
				 STATUSID,
				 DATECREATED, DATERECEIVED, DATEAMENDED, DATEACCEPTED, DATEASSIGNED, DATECOMPLETED, DATECANCELED, DATEACTIVE,
				 BILLTO,
				 VENDORNUMBER,
				 REFERENCEID,
				 REFERENCEVALUE,
				 AMENDMENTCOMMENTS,PORTOFLOADING,PORTOFDISCHARGE,
				 VERSION, LASTMODIFIEDBY, LASTMODIFIED,
				 CREATEDBY, ASSIGNEDBY, CATEGORYID, RECEIVERNAME, ORIGINATORNAME,
				 ISMONITORINGEMAILGENERATED,
				 MILEAGE,
				 CARBON,
				 CANVIEWASJOB,
				 ORIGINALSENDERCODE,
				 EDRAYREFERENCENUMBER,
				 ISREADYFORRETURN,
				 IMPORTCLAIMEDDATE,
				 ORIGINALSENDERNAME,
				 ORIGINALSENDERID,
				 MARKEDREADYDATE,
				 REDELIVERYNUMBER,
				 EXPIRATIONDATE,
				 STREETLASTFREEDAY,
				 REFERENCE1,
				 REFERENCE2,
				 REFERENCE3,
				 YARDLOCATION,
				 EMPTYNOTIFYDATE,
				 USERCOMMENT,
				 ARRIVALDATE,
				 AVAILABLEDATE,
				 GATEOUT,
				 RETURNDATE,
				 CONTAINERSTATUS,
				 CLAIMEDFULLDATE,
				 CLAIMEDFULLBY,
				 CLAIMEDEMPTYDATE,
				 CLAIMEDEMPTYBY,
				 DELIVERYDATE,
				 RELATEDWORKORDERID,
				 STACKID,
				 OFFERCATEGORY
				) SELECT
				 WORKORDERID,
				 WORKORDERNUMBER,
				 ORIGINATORID,
				 RECEIVERID,
				 WORKORDERDATE,
				 VESSEL,
				 VOYAGE,
				 CARRIERCODE,
				 masterAirWayBillNumber,
				 houseAirWayBillNumber,
				 paymentMethodIndicator,
				 shipmentReferenceNumber,
				 originatorOnHandNumber,
				 originatorOrderReference,
				 originatorImportRefNumber,
				 ETA,
				 BILLOFLADINGNUMBER,
				 BOOKINGNUMBER,
				 RAILBILLINGNUMBER,
				 RECEIPTLOCATION,
				 LOADLOCATION,
				 DISCHARGELOCATION,
				 DESTINATIONLOCATION,
				 EXPORTCUTOFFDATE,
				 LASTFREEDAY,
				 BROKER,
				 SHIPPER,
				 RESPONDBYDATE,
				 SOURCE,
				 CATEGORY,
				 STATUSID,
				 DATECREATED, DATERECEIVED, DATEAMENDED, DATEACCEPTED, DATEASSIGNED, DATECOMPLETED, DATECANCELED, DATEACTIVE,
				 BILLTO,
				 VENDORNUMBER,
				 REFERENCEID,
				 REFERENCEVALUE,
				 AMENDMENTCOMMENTS,PORTOFLOADING,PORTOFDISCHARGE,
				 v_version, LASTMODIFIEDBY, SYSDATE(),
				 CREATEDBY, ASSIGNEDBY, CATEGORYID,RECEIVERNAME, ORIGINATORNAME,
				 ISMONITORINGEMAILGENERATED,
				 MILEAGE,
				 CARBON,
				 CANVIEWASJOB,
				 ORIGINALSENDERCODE,
				 EDRAYREFERENCENUMBER,
				 ISREADYFORRETURN,
				 IMPORTCLAIMEDDATE,
				 ORIGINALSENDERNAME,
				 ORIGINALSENDERID,
				 MARKEDREADYDATE,
				 REDELIVERYNUMBER,
				 EXPIRATIONDATE,
				 STREETLASTFREEDAY,
				 REFERENCE1,
				 REFERENCE2,
				 REFERENCE3,
				 YARDLOCATION,
				 EMPTYNOTIFYDATE,
				 USERCOMMENT,
				 ARRIVALDATE,
				 AVAILABLEDATE,
				 GATEOUT,
				 RETURNDATE,
				 CONTAINERSTATUS,
				 CLAIMEDFULLDATE,
				 CLAIMEDFULLBY,
				 CLAIMEDEMPTYDATE,
				 CLAIMEDEMPTYBY,
				 DELIVERYDATE,
				 RELATEDWORKORDERID,
				 STACKID,
				 (SELECT OFFERCATEGORY from WORKORDERLOOKUP where WORKORDERID = v_workorderid)
				FROM  WORKORDER
				WHERE WORKORDERID = v_workorderid;
				SET step = 'X_STOP';
				Insert into X_STOP(STOPID,WORKORDERID,STOPNUMBER,STOPTYPE,FACILITYCODE,ADDRESS1,ADDRESS2,CITY,STATE,POSTALCODE,COUNTRY,TELEPHONE,FAX,COMMENTS,REFERENCENUMBER,TIMEZONE,NAME ,VERSION, LASTMODIFIEDBY, LASTMODIFIED, CONTACTNAME, CONTACTPHONE)
				select  STOPID,WORKORDERID,STOPNUMBER,STOPTYPE,FACILITYCODE,ADDRESS1,ADDRESS2,CITY,STATE,POSTALCODE,COUNTRY,TELEPHONE,FAX,COMMENTS,REFERENCENUMBER,TIMEZONE,NAME,v_version,LASTMODIFIEDBY,SYSDATE(),CONTACTNAME, CONTACTPHONE
				FROM  STOP
				WHERE WORKORDERID = v_workorderid;
				SET step = 'X_EQUIPMENTONWORKORDER';
				Insert into X_EQUIPMENTONWORKORDER (EQUIPMENTONWORKORDERID,WORKORDERID,SHIPPINGID,EQUIPMENTTYPECODE,
				EQUIPMENTID,NETWEIGHT,TAREWEIGHT,GROSSWEIGHT,WEIGHTUNITS,SHIPMENTNUMBER,FREIGHTDESCRIPTION,
				SEAL,EMPTYRELEASENUMBER,HAZMAT,OVERWEIGHT,STATUSID,VOLUME,PIECECOUNT,COMMENTS,EQUIPMENTNUMBER,
				WEIGHTUOM,VOLUMEUOM, VERSION,LASTMODIFIEDBY,LASTMODIFIED, HEIGHT, WIDTH, LENGTH, DIMENSIONUOM, CHASSISNUMBER,REEFERTEMP,REEFERTEMPUNIT)
				select EQUIPMENTONWORKORDERID,WORKORDERID,SHIPPINGID,EQUIPMENTTYPECODE,EQUIPMENTID,
				NETWEIGHT,TAREWEIGHT,GROSSWEIGHT,WEIGHTUNITS,SHIPMENTNUMBER,FREIGHTDESCRIPTION,SEAL,
				EMPTYRELEASENUMBER,HAZMAT,OVERWEIGHT,STATUSID,VOLUME,PIECECOUNT,COMMENTS,EQUIPMENTNUMBER,
				WEIGHTUOM,VOLUMEUOM, v_version,LASTMODIFIEDBY,SYSDATE(), HEIGHT, WIDTH, LENGTH, DIMENSIONUOM, CHASSISNUMBER,REEFERTEMP,REEFERTEMPUNIT
				from EQUIPMENTONWORKORDER
				where WORKORDERID = v_workorderid;
				SET step = 'X_EQUIPMENTHAZMAT';
				Insert into X_EQUIPMENTHAZMAT (EQUIPMENTHAZMATID,EQUIPMENTWORKORDERID,HMCOMMODITYDESC, HMSHIPPINGNAMEQUALIFIER, HAZARDOUSCLASSIFICATION, HAZARDOUSCLASSQUALIFIER, UNNAIDCODE, WEIGHTUOM, WEIGHT, HMPACKAGINGGROUPCODE, LIMITEDQTYINDICATOR, NOSNAME, TECHNICALNAME, OUTERPACKAGINGUOM,  OUTERPACKAGINGQTY, OUTERPACKAGINGDESC, EMERGENCYCONTACTNAME, EMERGENCYCONTACTTELEPHONE, EMERGENCYCONTACTREFERENCE, REPORTABLEQTYFLAG, FLASHPOINTUOM, FLASHPOINTTEMPERATURE,MARINEPOLLUTANTINDICATOR, HAZMATCOMMENTS,VERSION,LASTMODIFIEDBY,LASTMODIFIED,CREATIONTIME)
				select EH.EQUIPMENTHAZMATID, EH.EQUIPMENTWORKORDERID, EH.HMCOMMODITYDESC, EH.HMSHIPPINGNAMEQUALIFIER, EH.HAZARDOUSCLASSIFICATION, EH.HAZARDOUSCLASSQUALIFIER, EH.UNNAIDCODE, EH.WEIGHTUOM, EH.WEIGHT, EH.HMPACKAGINGGROUPCODE, EH.LIMITEDQTYINDICATOR, EH.NOSNAME, EH.TECHNICALNAME, EH.OUTERPACKAGINGUOM,  EH.OUTERPACKAGINGQTY, EH.OUTERPACKAGINGDESC, EH.EMERGENCYCONTACTNAME, EH.EMERGENCYCONTACTTELEPHONE, EH.EMERGENCYCONTACTREFERENCE, EH.REPORTABLEQTYFLAG, EH.FLASHPOINTUOM, EH.FLASHPOINTTEMPERATURE, EH.MARINEPOLLUTANTINDICATOR, EH.HAZMATCOMMENTS, v_version,EH.LASTMODIFIEDBY,SYSDATE(),eh.creationtime
				from EQUIPMENTHAZMAT EH join EQUIPMENTONWORKORDER EW
				on EH.EQUIPMENTWORKORDERID = EW.EQUIPMENTONWORKORDERID
				and EW.WORKORDERID = v_workorderid;
				SET step = 'X_CHARGE';
				Insert into X_CHARGE (CHARGEID,STOPID,EQUIPMENTWORKORDERID,SERVICEID,AMOUNT,FSCPERCENT,FSCAMOUNT,CURRENCY,TRANSACTIONNUMBER,COMMENTS,BILLTO,ISBILLABLE,ISINVOICED,CREATEDBY,CREATIONTIME,LASTMODIFIEDBY,LASTMODIFIED,VERSION)
				select CHARGEID,STOPID,EQUIPMENTWORKORDERID,SERVICEID,AMOUNT,FSCPERCENT,FSCAMOUNT,CURRENCY,TRANSACTIONNUMBER,COMMENTS,BILLTO,ISBILLABLE,ISINVOICED,CREATEDBY,CREATIONTIME,LASTMODIFIEDBY,SYSDATE(),v_version
				from CHARGE
				where EQUIPMENTWORKORDERID in (SELECT EQUIPMENTONWORKORDERID FROM EQUIPMENTONWORKORDER WHERE WORKORDERID = v_workorderid);
				SET step = 'X_APPOINTMENT';
				Insert into X_APPOINTMENT (APPOINTMENTID,EQUIPMENTONWORKORDERID,STOPID,SCHEDULEDTIMESTART,SCHEDULEDTIMEEND,SCHEDULEDTIMEFORM,ACTUALTIME,ACTION,COMMENTS,VERSION,LASTMODIFIEDBY,LASTMODIFIED,
				DATEACTUALENTERED, GATEOUTEND ,GATEOUTACTUAL ,GATEOUTFORM , GATEOUTSTART, GATEINSCHEDULECOMMENTS, GATEOUTSCHEDULECOMMENTS, SCHEDULEDLOCATIONCODE, SCHEDULEDLOCATIONCODEQUALIFIER,
				GATEINACTUALCOMMENTS, GATEOUTACTUALCOMMENTS, ACTUALLOCATIONCODE, ACTUALLOCATIONCODEQUALIFIER, LATITUDE, LONGITUDE, ASSIGNTODRIVERID, ASSIGNTODRIVERNAME, ASSIGNTODRIVERMOBILEPHONE, EXTERNALID, DRIVERNAME, DRIVERMOBILEPHONE  )
				select APPOINTMENTID,EQUIPMENTONWORKORDERID,STOPID,SCHEDULEDTIMESTART,SCHEDULEDTIMEEND,SCHEDULEDTIMEFORM,ACTUALTIME,ACTION,COMMENTS,v_version,LASTMODIFIEDBY,SYSDATE(),
				DATEACTUALENTERED, GATEOUTEND ,GATEOUTACTUAL ,GATEOUTFORM , GATEOUTSTART, GATEINSCHEDULECOMMENTS, GATEOUTSCHEDULECOMMENTS, SCHEDULEDLOCATIONCODE, SCHEDULEDLOCATIONCODEQUALIFIER,
				GATEINACTUALCOMMENTS, GATEOUTACTUALCOMMENTS, ACTUALLOCATIONCODE, ACTUALLOCATIONCODEQUALIFIER,  LATITUDE, LONGITUDE, ASSIGNTODRIVERID, ASSIGNTODRIVERNAME, ASSIGNTODRIVERMOBILEPHONE, EXTERNALID, DRIVERNAME, DRIVERMOBILEPHONE
				from APPOINTMENT
				where EQUIPMENTONWORKORDERID in (SELECT EQUIPMENTONWORKORDERID FROM EQUIPMENTONWORKORDER WHERE WORKORDERID = v_workorderid);
				SET step = 'X_EVENTEXCEPTION';
				Insert into X_EVENTEXCEPTION (EVENTEXCEPTIONID,VERSION,APPOINTMENTID,EXCEPTIONTYPE,PIECECOUNT,PIECECOUNTVARIANCE,DAMAGE,COMMENTS,WEIGHT,WEIGHTVARIANCE,LASTMODIFIED,REPORTEDDATE,
				REPORTEDBY)
				select EVENTEXCEPTIONID,v_version,APPOINTMENTID,EXCEPTIONTYPE,PIECECOUNT,PIECECOUNTVARIANCE,DAMAGE,COMMENTS,WEIGHT,WEIGHTVARIANCE,LASTMODIFIED,REPORTEDDATE,
				REPORTEDBY from EVENTEXCEPTION
				where APPOINTMENTID in (SELECT APPOINTMENTID FROM APPOINTMENT WHERE  EQUIPMENTONWORKORDERID in (SELECT EQUIPMENTONWORKORDERID FROM EQUIPMENTONWORKORDER WHERE WORKORDERID = v_workorderid));
				SET step = 'X_FREIGHTITEMS';
				INSERT INTO X_FREIGHTITEMS (
				FREIGHTLINEITEMSID,
				EQUIPMENTWORKORDERID,
				LINEITEMNUMBER,
				UNITID,
				TYPECODE,
				TYPEDESCRIPTION,
				GROSSWEIGHT,
				WEIGHTUOM,
				FREIGHTDESCRIPTION,
				HAZMAT,
				VOLUME,
				VOLUMEUOM,
				PIECECOUNT,
				HEIGHT,
				WIDTH,
				LENGTH,
				DIMENSIONUOM,
				INNERQUANTITY,
				INNERPACKAGETYPE,
				FREEFORM1,
				FREEFORM2,
				FREEFORM3,
				FREEFORM4,
				FREEFORM5,
				FREEFORM6,
				FREEFORM7,
				FREEFORM8,
				FREEFORM9,
				FREEFORM10,
				PURCHASEORDERNUMBER,
				ITEMNUMBER,
				lastmodified,
				lastmodifiedby,
				VERSION

				)
				SELECT
				fi.FREIGHTLINEITEMSID,
				fi.EQUIPMENTWORKORDERID,
				fi.LINEITEMNUMBER,
				fi.UNITID,
				fi.TYPECODE,
				fi.TYPEDESCRIPTION,
				fi.GROSSWEIGHT,
				fi.WEIGHTUOM,
				fi.FREIGHTDESCRIPTION,
				fi.HAZMAT,
				fi.VOLUME,
				fi.VOLUMEUOM,
				fi.PIECECOUNT,
				fi.HEIGHT,
				fi.WIDTH,
				fi.LENGTH,
				fi.DIMENSIONUOM,
				fi.INNERQUANTITY,
				fi.INNERPACKAGETYPE,
				fi.FREEFORM1,
				fi.FREEFORM2,
				fi.FREEFORM3,
				fi.FREEFORM4,
				fi.FREEFORM5,
				fi.FREEFORM6,
				fi.FREEFORM7,
				fi.FREEFORM8,
				fi.FREEFORM9,
				fi.FREEFORM10,
				fi.PURCHASEORDERNUMBER,
				fi.ITEMNUMBER,
				fi.lastmodified,
				fi.lastmodifiedby,
				v_version

				FROM
				FREIGHTITEMS fi
				WHERE
				EQUIPMENTWORKORDERID IN (
					SELECT
						EQUIPMENTONWORKORDERID
					FROM
						EQUIPMENTONWORKORDER
					WHERE
						workorderid = v_workorderid
				);
			END IF;
			if v_event = WO_ASSIGNED THEN
				select receiverid into v_receiverid FROM  WORKORDER  WHERE WORKORDERID = v_workorderid ;
				UPDATE X_WORKORDER 
				SET 
					RECEIVERID = v_receiverid
				WHERE
					workorderid = v_workorderid;
			end if;
			
		end $$
DELIMITER ;

-- 521
Insert into ATTACHMENTDOCTYPE (ATTACHMENTDOCTYPEID,ATTACHMENTDOCTYPENAME,ATTACHMENTDOCTYPECODE) values (5,'Cargo Label','CLB');
Insert into ATTACHMENTDOCTYPE (ATTACHMENTDOCTYPEID,ATTACHMENTDOCTYPENAME,ATTACHMENTDOCTYPECODE) values (6,'Bill of Lading','BOL');
Insert into ATTACHMENTDOCTYPE (ATTACHMENTDOCTYPEID,ATTACHMENTDOCTYPENAME,ATTACHMENTDOCTYPECODE) values (7,'Equipment Interchange Report','EIR');
Insert into ATTACHMENTDOCTYPE (ATTACHMENTDOCTYPEID,ATTACHMENTDOCTYPENAME,ATTACHMENTDOCTYPECODE) values (8,'Rate Confirmation','RAC');

-- 600
drop table if exists MEDIATION_ROUTING;
create table MEDIATION_ROUTING (
	ID bigint auto_increment, 
    `KEY` varchar(512),
	VALUE varchar(3092),
	primary key (`ID`)
);

insert into MEDIATION_ROUTING (`key`,VALUE) values('kafkaAllowedOriginators','OOOA,OOOB,KHNN,KHNNTEST');
insert into MEDIATION_ROUTING (`KEY`,VALUE) values('createWorkorderTopics','TENDERADAPTER_DMWORKORDER');
insert into MEDIATION_ROUTING(`KEY`,VALUE) values('updateWorkorderTopics','TENDERADAPTER_DMWORKORDER');
insert into MEDIATION_ROUTING(`KEY`,VALUE) values('acceptWorkorderTopics','TENDERADAPTER_ACCEPTREJECT');
insert into MEDIATION_ROUTING(`KEY`,VALUE) values('rejectWorkorderTopics','TENDERADAPTER_ACCEPTREJECT');
insert into MEDIATION_ROUTING(`KEY`,VALUE) values('actualAppointmentTopics','TENDERADAPTER_ACTUALAPPOINTMENT');
insert into MEDIATION_ROUTING(`KEY`,VALUE) values('shipmentEventForwardToWMTopics','000-rama');

-- 605
ALTER TABLE shipmentevents ADD eventcomments VARCHAR(4000);

-- 607
alter table shipmentevents add EQUIPMENTTYPECODE VARCHAR(50);
alter table shipmentevents add WORKORDERID bigint;

-- 608
ALTER TABLE eventexception ADD exceptionreason VARCHAR(200);
ALTER TABLE appointment ADD exceptionreason VARCHAR(200);
ALTER TABLE workorderlookup ADD exceptionreason VARCHAR(200);
ALTER TABLE shipmentevents ADD exceptionreason VARCHAR(200);

-- 609
CREATE OR REPLACE VIEW `VWEQUIPMENTADVANCEDFILTER` (`APPOINTMENTID`, `WORKORDERID`, `EQUIPMENTONWORKORDERID`, `WORKORDERNUMBER`, `ORIGINATOR`, `RECEIVER`, `ORIGINATORNAME`, `RECEIVERNAME`, `CATEGORY`, `CATEGORYTYPE`, `STATUS`, `WORKORDERDATE`, `VESSEL`, `VOYAGE`, `CUTTOFFDATE`, `PORTOFLOADING`, `PORTOFDISCHARGE`, `LASTFREEDAY`, `RESPONDBYDATE`, `DATECREATED`, `DATEACCEPTED`, `DATEASSIGNED`, `DATECOMPLETED`, `DATECANCELED`, `DATEACTIVE`, `SHIPMENTREFERENCENUMBER`, `ORIGINATORIMPORTREFNUMBER`, `EQUIPMENTNUMBER`, `EQUIPMENTTYPECODE`, `ASSOCIATEDUNITID`, `PIECECOUNT`, `STOPNUMBER`, `STOPNAME`, `GISCHEDULETIMEFROM`, `GISCHEDULETIMESTART`, `GISCHEDULETIMEEND`, `GOSCHEDULETIMEFROM`, `GOSCHEDULETIMESTART`, `GOSCHEDULETIMEEND`, `GIACTUALTIME`, `GOACTUALTIME`, `BILLOFLADING`, `BOOKINGNUMBER`, `STOPTYPE`, `CATEGORYID`, `ISINVOICED`, `SCHEDULEDLOCATIONCODE`, `SCHEDULEDLOCATIONCODEQUALIFIER`, `ACTUALLOCATIONCODE`, `ACTUALLOCATIONCODEQUALIFIER`, `GATEINSCHEDULECOMMENTS`, `GATEINACTUALCOMMENTS`, `GATEOUTSCHEDULECOMMENTS`, `GATEOUTACTUALCOMMENTS`, `SHIPMENTNUMBER`, `SEAL`, `EVENTEXCEPTIONID`, `EXCEPTIONFLAG`, `REPORTEDPIECECOUNT`, `DAMAGE`, `EVENTEXCEPTIONCOMMENTS`, `EXCEPTIONREASON`) AS 
  SELECT  /*+ parallel(3) */ DISTINCT APP.APPOINTMENTID APPOINTMENTID,
  WO.WORKORDERID WORKORDERID,
  EWO.EQUIPMENTONWORKORDERID EQUIPMENTONWORKORDERID,
  WO.WORKORDERNUMBER WORKORDERNUMBER,
  WO.ORIGINATORID ORIGINATOR,
  WO.RECEIVERID RECEIVER,
  WO.ORIGINATORNAME ORIGINATORNAME,
  WO.RECEIVERNAME RECEIVERNAME,
  CAT.NAME CATEGORY,
  CATT.DESCRIPTION CATEGORYTYPE,
  ST.DESCRIPTION STATUS,
  WO.WORKORDERDATE WORKORDERDATE,
  WO.VESSEL VESSEL,
  WO.VOYAGE VOYAGE,
  WO.EXPORTCUTOFFDATE CUTTOFFDATE,
  WO.PORTOFLOADING PORTOFLOADING,
  WO.PORTOFDISCHARGE PORTOFDISCHARGE,
  WO.LASTFREEDAY LASTFREEDAY,
  WO.RESPONDBYDATE RESPONDBYDATE,
  WO.DATECREATED DATECREATED,
  WO.DATEACCEPTED DATEACCEPTED,
  WO.DATEASSIGNED DATEASSIGNED,
  WO.DATECOMPLETED DATECOMPLETED,
  WO.DATECANCELED DATECANCELED,
  WO.DATEACTIVE DATEACTIVE,
  WO.SHIPMENTREFERENCENUMBER SHIPMENTREFERENCENUMBER,
  WO.ORIGINATORIMPORTREFNUMBER ORIGINATORIMPORTREFNUMBER,
  EWO.EQUIPMENTNUMBER EQUIPMENTNUMBER,
  EWO.EQUIPMENTTYPECODE EQUIPMENTTYPECODE,
  EWO.ASSOCIATEDUNITID ASSOCIATEDUNITID,
  EWO.PIECECOUNT PIECECOUNT,
  STP.STOPNUMBER STOPNUMBER,
  STP.NAME STOPNAME,
  APP.SCHEDULEDTIMEFORM GISCHEDULETIMEFROM,
  APP.SCHEDULEDTIMESTART GISCHEDULETIMESTART,
  APP.SCHEDULEDTIMEEND GISCHEDULETIMEEND,
  APP.GATEOUTFORM GOSCHEDULETIMEFROM,
  APP.GATEOUTSTART GOSCHEDULETIMESTART,
  APP.GATEOUTEND GOSCHEDULETIMEEND,
  APP.ACTUALTIME GIACTUALTIME,
  APP.GATEOUTACTUAL GOACTUALTIME,
  WO.BILLOFLADINGNUMBER BILLOFLADING,
  WO.BOOKINGNUMBER BOOKINGNUMBER,
  STP.STOPTYPE STOPTYPE,
  CAT.ID CATEGORYID,
  EQV.ISINVOICED ISINVOICED,
  APP.SCHEDULEDLOCATIONCODE,
  APP.SCHEDULEDLOCATIONCODEQUALIFIER,
  APP.ACTUALLOCATIONCODE,
  APP.ACTUALLOCATIONCODEQUALIFIER,
  APP.GATEINSCHEDULECOMMENTS,
  APP.GATEINACTUALCOMMENTS,
  APP.GATEOUTSCHEDULECOMMENTS,
  APP.GATEOUTACTUALCOMMENTS,
  EWO.SHIPMENTNUMBER,
  EWO.SEAL,
  EE.EVENTEXCEPTIONID EVENTEXCEPTIONID,
  CASE 
	WHEN APP.EXCEPTIONREASON is not NULL
	THEN 1 
	ELSE CASE EE.EXCEPTIONTYPE WHEN 'OSD' THEN 1 ELSE 0 END 
	END EXCEPTIONFLAG,
  EE.PIECECOUNT REPORTEDPIECECOUNT,
  EE.DAMAGE DAMAGE,
  EE.COMMENTS EVENTEXCEPTIONCOMMENTS,
  APP.EXCEPTIONREASON
FROM WORKORDER WO
  LEFT JOIN PARTNERSHIP p on WO.ORIGINATORID = p.organization_dbid AND WO.RECEIVERID = p.organization_partner_dbid
  left join EQUIPMENTONWORKORDER EWO on WO.WORKORDERID = EWO.WORKORDERID
 LEFT JOIN (SELECT DISTINCT EQUIPMENTWORKORDERID, ISINVOICED
  FROM CHARGE
  WHERE ISINVOICED = 1
  ) EQV on EWO.EQUIPMENTONWORKORDERID = EQV.equipmentworkorderid
  left join STOP STP on WO.WORKORDERID = STP.WORKORDERID
  left join APPOINTMENT APP on EWO.EQUIPMENTONWORKORDERID = APP.EQUIPMENTONWORKORDERID AND STP.STOPID = APP.STOPID
  left join STATUS ST on WO.STATUSID = ST.STATUSID AND ST.STATUSID IN (3, 5, 6, 9, 10)
  left join CATEGORY CAT on CAT.ID                     = WO.CATEGORYID
  left join CATEGORYTYPE CATT on CAT.TYPE                  = CATT.ID
 LEFT JOIN EVENTEXCEPTION EE on APP.APPOINTMENTID = EE.APPOINTMENTID
ORDER BY WO.WORKORDERNUMBER;

-- 610
CREATE OR REPLACE VIEW `VW_WO_SHIPMENTEVENTS` (`TABLENAME`, `PRIMARYKEY`, `WORKORDERID`, `WORKORDERNUMBER`, `EVENTCODE`, `EVENTNAME`, `EVENTTIME`, `PUBLISHERID`, `PUBLISHERCODE`, `ORIGINATORID`, `ORIGINATORCODE`, `REPORTSOURCE`, `REPORTEDBY`, `CREATEDATE`, `EVENTCOMMENTS`, `EXCEPTIONREASON`) AS 
  
    select 'shipmentevents' as tablename, se.shipmenteventid as primarykey,
    w.workorderid as workorderid, w.workordernumber as workordernumber,
    se.eventcode as eventcode, se.eventname as eventname,
    se.eventtime as eventtime, null as publisherid ,se.publishercode as publishercode,
    se.originatorid as originatorid, se.originatorcode as originatorcode,
    se.reportsource as reportsource, se.reportedby as reportedby,
    se.createdate as createdate, se.eventcomments as eventcomments, se.exceptionreason as exceptionreason
    from shipmentevents se, workorder w
    where se.workordernumber = w.workordernumber
    and se.originatorid = w.originatorid
    and (se.publisherid = w.receiverid or se.publisherid=w.originatorid)
    union
    select 'appointments', ap.appointmentid,
    w.workorderid, w.workordernumber,
    case WHEN ap.exceptionreason is null THEN 'ACTUAL' ELSE 'DELAYED' END, s.stoptype,
    ap.actualtime, w.RECEIVERID, (select code from organization  where dbid = w.RECEIVERID ),
    w.originatorid, (select code from organization where dbid = w.originatorid ),
    case (select application_code from userprofile up
    where up.USER_DBID in (select dbid from users where username = ap.lastmodifiedby) limit 1)
    WHEN 'DMS' THEN 'WebClient' WHEN 'DMM' THEN 'Mobile' ELSE 'EDI' END, ap.lastmodifiedby,
    ap.dateactualentered, '  ', ap.exceptionreason as exceptionreason
    from workorder w, stop s, appointment ap
    where w.workorderid = s.workorderid
    and s.stopid = ap.stopid
    and ap.actualtime is not null;

-- 611

CREATE OR REPLACE VIEW `VW_SEARCH_SHIPMENTEVENTS` (`SHIPMENTEVENTID`, `PUBLISHERCODE`, `ORIGINATORID`, `ORIGINATORCODE`, `ORIGINATORPARENTID`, `ORIGINATORPARENTCODE`, `ORIGINATORNAME`, `EVENTCODE`, `EVENTNAME`, `HOUSEBILL`, `MASTERBILL`, `WORKORDERNUMBER`, `UNITID`, `LONGITUDE`, `LATITUDE`, `LOCATION`, `EVENTTIME`, `REPORTEDBY`, `REPORTSOURCE`, `NOTES`, `CREATEDBY`, `CREATEDATE`, `PUBLISHERID`, `PUBLISHERPARENTID`, `PUBLISHERPARENTCODE`, `ONHAND`, `EQUIPMENTTYPECODE`, `STATUS`, `WORKORDERID`, `RECEIVERNAME`, `EVENTCOMMENTS`, `EXCEPTIONREASON`) AS 
  (
SELECT s.`SHIPMENTEVENTID`,s.`PUBLISHERCODE`,s.`ORIGINATORID`,s.`ORIGINATORCODE`,s.`ORIGINATORPARENTID`,s.`ORIGINATORPARENTCODE`,s.`ORIGINATORNAME`,s.`EVENTCODE`,s.`EVENTNAME`,s.`HOUSEBILL`,s.`MASTERBILL`,s.`WORKORDERNUMBER`,s.`UNITID`,s.`LONGITUDE`,s.`LATITUDE`,s.`LOCATION`,s.`EVENTTIME`,s.`REPORTEDBY`,s.`REPORTSOURCE`,s.`NOTES`,s.`CREATEDBY`,s.`CREATEDATE`,s.`PUBLISHERID`,s.`PUBLISHERPARENTID`,s.`PUBLISHERPARENTCODE`,s.`ONHAND`,s.`EQUIPMENTTYPECODE`, st.description as status, s.`WORKORDERID`, w.receivername, s.`EVENTCOMMENTS`, s.`EXCEPTIONREASON`
FROM shipmentevents s
LEFT OUTER JOIN workorder w
ON s.workordernumber = w.workordernumber and s.originatorid = w.originatorid and s.workorderid = w.workorderid
left outer join status st on st.statusid = w.statusid);

-- 612
ALTER TABLE workorderlookup ADD haspodattachment VARCHAR(16); 

-- 613
drop procedure if exists UPDATE_HASPOD_WRKODER;
delimiter $$
create PROCEDURE UPDATE_HASPOD_WRKODER() 
	BEGIN
		DECLARE mWorkOrderId bigint;
        declare done boolean default false;
		DECLARE V_TOTAL_ATTACHMENT_RCRDS bigint;
		declare WORKORDERLOOKUP_DTLS_CURSOR Cursor for
			SELECT DISTINCT WORKORDERID AS WORKORDERID       
			 FROM WORKORDERLOOKUP ;
		declare continue handler for not found set done = 1;
        declare exit handler for SQLEXCEPTION 
			begin
				select 'Error in generating data';
                resignal;
			end;

		OPEN WORKORDERLOOKUP_DTLS_CURSOR;
		main: LOOP
			FETCH WORKORDERLOOKUP_DTLS_CURSOR into mWorkOrderId;
			if done = 1 then leave main;
			end if;
			SELECT COUNT(*) INTO V_TOTAL_ATTACHMENT_RCRDS FROM ATTACHMENT WHERE 
			WORKORDERID = mWorkOrderId AND DOCUMENTTYPE = '1' ;

			IF(V_TOTAL_ATTACHMENT_RCRDS > 0) THEN
				UPDATE  WORKORDERLOOKUP SET HASPODATTACHMENT = 'Yes' 
					WHERE mWorkOrderId;
			ELSE
				UPDATE  WORKORDERLOOKUP SET HASPODATTACHMENT = 'No' 
					WHERE WORKORDERID = mWorkOrderId;
			END IF;

			SET V_TOTAL_ATTACHMENT_RCRDS = 0;
			set done = 0;
		END LOOP main;
		CLOSE WORKORDERLOOKUP_DTLS_CURSOR;

	END $$
delimiter ;

-- 614
drop trigger if exists UPDWLUP_ATTACHMNT_AFTR_INS_UPD;
DELIMITER $$
create TRIGGER UPDWLUP_ATTACHMNT_AFTR_INS_UPD
	after insert
	on ATTACHMENT FOR EACH ROW
		BEGIN
			-- DECLARE pragma autonomous_transaction;
			DECLARE E_MSG VARCHAR(400);
            DECLARE V_COUNT DOUBLE;
            DECLARE EXIT HANDLER FOR SQLEXCEPTION SET E_MSG = 'SQLERRM';

            SELECT COUNT(*) INTO V_COUNT FROM ATTACHMENT where workorderid = new.workorderid and documenttype = '1';
          -- -  INSERT INTO TESTDMQA (COLUMN1) VALUES('COUNT' || V_COUNT);
			IF (NEW.DOCUMENTTYPE = '1' AND NEW.DOCUMENTTYPE IS NOT NULL) THEN
				UPDATE WORKORDERLOOKUP SET HASPODATTACHMENT = 'Yes' where workorderid = new.workorderid;
			ELSEIF (NEW.DOCUMENTTYPE <> '1' AND NEW.DOCUMENTTYPE IS NOT NULL) THEN
				IF(V_COUNT > 0) THEN
					UPDATE WORKORDERLOOKUP SET HASPODATTACHMENT = 'Yes' where workorderid = new.workorderid;   
				ELSE
					UPDATE WORKORDERLOOKUP SET HASPODATTACHMENT = 'No' where workorderid = new.workorderid;
				END IF;				                    
			END IF;           
		END $$
DELIMITER ;
																														
-- latest
drop trigger if exists `invoice_AFTER_INSERT`;
DELIMITER $$
create TRIGGER `invoice_AFTER_INSERT`
AFTER insert on INVOICE
FOR EACH ROW
    BEGIN
        DECLARE v_event               DOUBLE;
        DECLARE v_invoiceid           DOUBLE;
        DECLARE e_msg                 VARCHAR(400);
        DECLARE INV_SENT              tinyint default 7;
        DECLARE inv_count 			bigint;
        DECLARE EXIT handler FOR SQLEXCEPTION SET e_msg = 'SQLERRM';

        SET v_event     = new.STATUSID;
        SET v_invoiceid = new.invoiceid;
        if v_event = INV_SENT then
			select count(*) into inv_count from invoice where INVOICEID=new.INVOICEID;
			if inv_count>0 then
			  update invoice
			  set INVOICENUMBER= new.INVOICENUMBER,TOTALAMOUNT= new.TOTALAMOUNT,STATUSID= new.STATUSID,DATECREATED= new.DATECREATED,CREATEDBY= new.CREATEDBY,DATEAPPROVED= new.DATEAPPROVED,DATEREJECTED= new.DATEREJECTED,DATECOMPLETED= new.DATECOMPLETED,COMPLETEDBY= new.COMPLETEDBY,DATEUPDATED= new.DATEUPDATED,DATESEND= new.DATESEND,DATEDELETED= new.DATEDELETED,DELETEDBY= new.DELETEDBY,LASTMODIFIEDBY= new.LASTMODIFIEDBY,LASTMODIFIED= new.LASTMODIFIED,FROMRECEIVER= new.FROMRECEIVER,BILLTO= new.BILLTO,RECEIVERCODE= new.RECEIVERCODE,ORIGINATORCODE= new.ORIGINATORCODE,EQUIPMENTNUMBERS= new.EQUIPMENTNUMBERS,PAYMENTOPTION= new.PAYMENTOPTION,SENDBY= new.SENDBY,REJECTIONREASON= new.REJECTIONREASON,RECEIVERID= new.RECEIVERID,ORIGINATORID= new.ORIGINATORID,FACILITYORIGINATORNAME= new.FACILITYORIGINATORNAME,FACILITYRECEIVERNAME= new.FACILITYRECEIVERNAME,BASERATE= new.BASERATE,FSC= new.FSC,OTHER= new.OTHER,EQUIPMENTSIZETYPES= new.EQUIPMENTSIZETYPES,PARTYCODE= new.PARTYCODE,OFFICELOCATION= new.OFFICELOCATION,
			  DATEINVOICERECEIVED=new.DATEINVOICERECEIVED,INVOICERECEIVEDAMOUNT=new.INVOICERECEIVEDAMOUNT,INVOICERECEIVEDCURRENCY=new.INVOICERECEIVEDCURRENCY,
			  DATEPAYMENTREQUESTED=new.DATEPAYMENTREQUESTED,PAYMENTREQUESTEDAMOUNT=new.PAYMENTREQUESTEDAMOUNT,PAYMENTREQUESTEDCURRENCY=new.PAYMENTREQUESTEDCURRENCY,
			  DATEPAYMENTISSUED=new.DATEPAYMENTISSUED,PAYMENTISSUEDAMOUNT=new.PAYMENTISSUEDAMOUNT,PAYMENTISSUEDCURRENCY=new.PAYMENTISSUEDCURRENCY
			  where INVOICEID=new.INVOICEID;
			else
			  insert into invoice(INVOICEID,INVOICENUMBER,TOTALAMOUNT,STATUSID,DATECREATED,CREATEDBY,DATEAPPROVED,DATEREJECTED,DATECOMPLETED,COMPLETEDBY,DATEUPDATED,DATESEND,DATEDELETED,DELETEDBY,LASTMODIFIEDBY,LASTMODIFIED,FROMRECEIVER,BILLTO,RECEIVERCODE,ORIGINATORCODE,EQUIPMENTNUMBERS,PAYMENTOPTION,SENDBY,REJECTIONREASON,RECEIVERID,ORIGINATORID,FACILITYORIGINATORNAME,FACILITYRECEIVERNAME,BASERATE,FSC,OTHER,EQUIPMENTSIZETYPES,PARTYCODE,OFFICELOCATION,DATEINVOICERECEIVED,INVOICERECEIVEDAMOUNT,INVOICERECEIVEDCURRENCY,DATEPAYMENTREQUESTED,PAYMENTREQUESTEDAMOUNT,PAYMENTREQUESTEDCURRENCY,DATEPAYMENTISSUED,PAYMENTISSUEDAMOUNT,PAYMENTISSUEDCURRENCY)
			  values(new.INVOICEID, new.INVOICENUMBER, new.TOTALAMOUNT, new.STATUSID, new.DATECREATED, new.CREATEDBY, new.DATEAPPROVED, new.DATEREJECTED, new.DATECOMPLETED, new.COMPLETEDBY, new.DATEUPDATED, new.DATESEND, new.DATEDELETED, new.DELETEDBY, new.LASTMODIFIEDBY, new.LASTMODIFIED, new.FROMRECEIVER, new.BILLTO, new.RECEIVERCODE, new.ORIGINATORCODE, new.EQUIPMENTNUMBERS, new.PAYMENTOPTION, new.SENDBY, new.REJECTIONREASON, new.RECEIVERID, new.ORIGINATORID, new.FACILITYORIGINATORNAME, new.FACILITYRECEIVERNAME, new.BASERATE, new.FSC, new.OTHER, new.EQUIPMENTSIZETYPES, new.PARTYCODE, new.OFFICELOCATION,new.DATEINVOICERECEIVED,new.INVOICERECEIVEDAMOUNT,new.INVOICERECEIVEDCURRENCY,new.DATEPAYMENTREQUESTED,new.PAYMENTREQUESTEDAMOUNT,new.PAYMENTREQUESTEDCURRENCY,new.DATEPAYMENTISSUED,new.PAYMENTISSUEDAMOUNT,new.PAYMENTISSUEDCURRENCY);
			end if;
		end if;
    
		insert into INVOICEACTIVITY (activity, invoiceid, modifiedby)
		values   ( v_event, v_invoiceid,  f_modifiedby  );

    END $$
DELIMITER ;																

drop trigger if exists `invoice_AFTER_UPDATE`;
DELIMITER $$
create TRIGGER `invoice_AFTER_UPDATE`
AFTER update on INVOICE
FOR EACH ROW
    BEGIN
        DECLARE v_event               DOUBLE;
        DECLARE v_invoiceid           DOUBLE;
        DECLARE e_msg                 VARCHAR(400);
        DECLARE INV_SENT              tinyint default 7;
        DECLARE inv_count 			bigint;
        DECLARE EXIT handler FOR SQLEXCEPTION SET e_msg = 'SQLERRM';

        SET v_event     = new.STATUSID;
        SET v_invoiceid = new.invoiceid;
        if v_event = INV_SENT then
			select count(*) into inv_count from invoice where INVOICEID=new.INVOICEID;
			if inv_count>0 then
			  update invoice
			  set INVOICENUMBER= new.INVOICENUMBER,TOTALAMOUNT= new.TOTALAMOUNT,STATUSID= new.STATUSID,DATECREATED= new.DATECREATED,CREATEDBY= new.CREATEDBY,DATEAPPROVED= new.DATEAPPROVED,DATEREJECTED= new.DATEREJECTED,DATECOMPLETED= new.DATECOMPLETED,COMPLETEDBY= new.COMPLETEDBY,DATEUPDATED= new.DATEUPDATED,DATESEND= new.DATESEND,DATEDELETED= new.DATEDELETED,DELETEDBY= new.DELETEDBY,LASTMODIFIEDBY= new.LASTMODIFIEDBY,LASTMODIFIED= new.LASTMODIFIED,FROMRECEIVER= new.FROMRECEIVER,BILLTO= new.BILLTO,RECEIVERCODE= new.RECEIVERCODE,ORIGINATORCODE= new.ORIGINATORCODE,EQUIPMENTNUMBERS= new.EQUIPMENTNUMBERS,PAYMENTOPTION= new.PAYMENTOPTION,SENDBY= new.SENDBY,REJECTIONREASON= new.REJECTIONREASON,RECEIVERID= new.RECEIVERID,ORIGINATORID= new.ORIGINATORID,FACILITYORIGINATORNAME= new.FACILITYORIGINATORNAME,FACILITYRECEIVERNAME= new.FACILITYRECEIVERNAME,BASERATE= new.BASERATE,FSC= new.FSC,OTHER= new.OTHER,EQUIPMENTSIZETYPES= new.EQUIPMENTSIZETYPES,PARTYCODE= new.PARTYCODE,OFFICELOCATION= new.OFFICELOCATION,
			  DATEINVOICERECEIVED=new.DATEINVOICERECEIVED,INVOICERECEIVEDAMOUNT=new.INVOICERECEIVEDAMOUNT,INVOICERECEIVEDCURRENCY=new.INVOICERECEIVEDCURRENCY,
			  DATEPAYMENTREQUESTED=new.DATEPAYMENTREQUESTED,PAYMENTREQUESTEDAMOUNT=new.PAYMENTREQUESTEDAMOUNT,PAYMENTREQUESTEDCURRENCY=new.PAYMENTREQUESTEDCURRENCY,
			  DATEPAYMENTISSUED=new.DATEPAYMENTISSUED,PAYMENTISSUEDAMOUNT=new.PAYMENTISSUEDAMOUNT,PAYMENTISSUEDCURRENCY=new.PAYMENTISSUEDCURRENCY
			  where INVOICEID=new.INVOICEID;
			else
			  insert into invoice(INVOICEID,INVOICENUMBER,TOTALAMOUNT,STATUSID,DATECREATED,CREATEDBY,DATEAPPROVED,DATEREJECTED,DATECOMPLETED,COMPLETEDBY,DATEUPDATED,DATESEND,DATEDELETED,DELETEDBY,LASTMODIFIEDBY,LASTMODIFIED,FROMRECEIVER,BILLTO,RECEIVERCODE,ORIGINATORCODE,EQUIPMENTNUMBERS,PAYMENTOPTION,SENDBY,REJECTIONREASON,RECEIVERID,ORIGINATORID,FACILITYORIGINATORNAME,FACILITYRECEIVERNAME,BASERATE,FSC,OTHER,EQUIPMENTSIZETYPES,PARTYCODE,OFFICELOCATION,DATEINVOICERECEIVED,INVOICERECEIVEDAMOUNT,INVOICERECEIVEDCURRENCY,DATEPAYMENTREQUESTED,PAYMENTREQUESTEDAMOUNT,PAYMENTREQUESTEDCURRENCY,DATEPAYMENTISSUED,PAYMENTISSUEDAMOUNT,PAYMENTISSUEDCURRENCY)
			  values(new.INVOICEID, new.INVOICENUMBER, new.TOTALAMOUNT, new.STATUSID, new.DATECREATED, new.CREATEDBY, new.DATEAPPROVED, new.DATEREJECTED, new.DATECOMPLETED, new.COMPLETEDBY, new.DATEUPDATED, new.DATESEND, new.DATEDELETED, new.DELETEDBY, new.LASTMODIFIEDBY, new.LASTMODIFIED, new.FROMRECEIVER, new.BILLTO, new.RECEIVERCODE, new.ORIGINATORCODE, new.EQUIPMENTNUMBERS, new.PAYMENTOPTION, new.SENDBY, new.REJECTIONREASON, new.RECEIVERID, new.ORIGINATORID, new.FACILITYORIGINATORNAME, new.FACILITYRECEIVERNAME, new.BASERATE, new.FSC, new.OTHER, new.EQUIPMENTSIZETYPES, new.PARTYCODE, new.OFFICELOCATION,new.DATEINVOICERECEIVED,new.INVOICERECEIVEDAMOUNT,new.INVOICERECEIVEDCURRENCY,new.DATEPAYMENTREQUESTED,new.PAYMENTREQUESTEDAMOUNT,new.PAYMENTREQUESTEDCURRENCY,new.DATEPAYMENTISSUED,new.PAYMENTISSUEDAMOUNT,new.PAYMENTISSUEDCURRENCY);
			end if;
		end if;
    
		insert into INVOICEACTIVITY (activity, invoiceid, modifiedby)
		values   ( v_event, v_invoiceid,  f_modifiedby  );

    END $$
DELIMITER ;

drop trigger if exists `invoice_AFTER_DELETE`;
DELIMITER $$
create TRIGGER `invoice_AFTER_DELETE`
AFTER delete on INVOICE
FOR EACH ROW
    BEGIN
        DECLARE v_event               DOUBLE;
        DECLARE v_invoiceid           DOUBLE;
        DECLARE e_msg                 VARCHAR(400);
        DECLARE INV_DELETED           tinyint default 5;
        DECLARE EXIT handler FOR SQLEXCEPTION SET e_msg = 'SQLERRM';

        SET v_event     = INV_DELETED;
        SET v_invoiceid = old.invoiceid;
    
		insert into INVOICEACTIVITY (activity, invoiceid, modifiedby)
		values   ( v_event, v_invoiceid,  f_modifiedby  );

    END $$
DELIMITER ;
																
ALTER TABLE workorder MODIFY workorderdate datetime;	
																
																
																
UPDATE amendworkorderstatedecider 
SET `UNASSIGNED` = 'O', `REJECTED` = 'O', `CANCELLED` = 'O', `AMEND_BY_O` = 'NA' 
WHERE (`ELEMENT_NAME` = 'workorderDTO.equipmentWorkOrderDTO.reefertemp');

UPDATE amendworkorderstatedecider 
SET `UNASSIGNED` = 'O', `REJECTED` = 'O', `CANCELLED` = 'O', `AMEND_BY_O` = 'NA' 
WHERE (`ELEMENT_NAME` = 'workorderDTO.equipmentWorkOrderDTO.reefertempunit');


INSERT INTO updateworkorderstatedecider
(`ELEMENT_NAME`, `UNASSIGNED`, `ASSIGNED`, `ACCEPTED`, `REJECTED`, `CANCELLED`, `AMEND_BY_O`, `AMEND_BY_R`, `ACTIVE`, `COMPLETED`) 
VALUES ('workorderDTO.equipmentWorkOrderDTO.reefertemp', 'O', 'O', 'NU', 'NU', 'NU', 'NU', 'NU', 'NU', 'NU');

INSERT INTO updateworkorderstatedecider 
(`ELEMENT_NAME`, `UNASSIGNED`, `ASSIGNED`, `ACCEPTED`, `REJECTED`, `CANCELLED`, `AMEND_BY_O`, `AMEND_BY_R`, `ACTIVE`, `COMPLETED`)
 VALUES ('workorderDTO.equipmentWorkOrderDTO.reefertempunit', 'O', 'O', 'NU', 'NU', 'NU', 'NU', 'NU', 'NU', 'NU');
																																
ALTER TABLE workorder
ADD COLUMN `ORIGINATORCODE` VARCHAR(50) NULL DEFAULT NULL AFTER `REQUESTEDPICKUPDATE`,
ADD COLUMN `RECEIVERCODE` VARCHAR(50) NULL DEFAULT NULL AFTER `ORIGINATORCODE`;																
																
CREATE TABLE `devicetoken` (
  `DbId` int(11) NOT NULL AUTO_INCREMENT,
  `UserName` varchar(50) DEFAULT NULL,
  `DeviceToken` varchar(200) DEFAULT NULL,
  `Platform` varchar(50) DEFAULT NULL,
  `DateCreated` datetime DEFAULT NULL,
  `LastModified` datetime DEFAULT NULL,
  PRIMARY KEY (`DbId`)
)

alter table commentsonworkorder
add column PARTYCODE varchar(10) not null;
																
alter table activityonworkorder
add column ORIGINATORCODE varchar(10), 
add column RECEIVERCODE varchar(10);

alter table workorderrejection
add column PARTYCODE varchar(10);																
																
alter table offer
add column PARTYCODE varchar(10),
add column ORIGINATORFACILITYCODE varchar(10);												
																
alter table bidder
add column PARTYCODE varchar(10),
add column FACILITYCODE varchar(10);												
												
alter table tariff
add column RECEIVERPARTYCODE varchar(10),
add column ORIGINATORPARTYCODE varchar(10);							
																																									
alter table categoryallowinvoice
add column RECFACILITYCODE varchar(10);											
																
alter table stackmotorcarrier
add column MOTORCARRIERCODE VARCHAR(10),
drop primary key,
add primary key(MOTORCARRIERCODE, MOTORCARRIERID, STACKID);
															
alter table category
add column OFFICECODE VARCHAR(10),
ADD COLUMN ORIGINATORCODE VARCHAR(10);

CREATE OR REPLACE VIEW `vwcategoryfilter` AS
    SELECT 
        `a`.`ID` AS `ID`,
        `a`.`NAME` AS `NAME`,
        `a`.`ORIGINATORCODE` AS `ORIGINATORCODE`,
        `a`.`ORIGINATORNAME` AS `ORIGINATORNAME`,
        `a`.`OFFICECODE` AS `OFFICECODE`,
        `a`.`OFFICENAME` AS `OFFICENAME`,
        `a`.`DATECREATED` AS `DATECREATED`,
        `a`.`TYPE` AS `TYPE`,
        `a`.`TRIP` AS `TRIP`,
        `a`.`ACTIVE` AS `ACTIVE`,
        `totalstops`.`NUMBEROFSTOPS` AS `NUMBEROFSTOPS`
    FROM
        (((`dmsi`.`category` `a`
        JOIN (SELECT 
            COUNT(`dmsi`.`categorydetails`.`CATEGORYID`) AS `NUMBEROFSTOPS`,
                `dmsi`.`categorydetails`.`CATEGORYID` AS `CATEGORYID`
        FROM
            (`dmsi`.`category`
        JOIN `dmsi`.`categorydetails` ON ((`dmsi`.`category`.`ID` = `dmsi`.`categorydetails`.`CATEGORYID`)))
        GROUP BY `dmsi`.`categorydetails`.`CATEGORYID`) `totalstops` ON ((`a`.`ID` = `totalstops`.`CATEGORYID`)))
        JOIN `dmsi`.`categorytype` `c` ON ((`a`.`TYPE` = `c`.`ID`)))
        JOIN `dmsi`.`categorytrip` `d` ON ((`a`.`TRIP` = `d`.`ID`)));

alter table CATEGORYPARTNERSHIP
add column OFFICECODE varchar(10);

alter table auto_approval
add column ORIGINATORCODE varchar(10),
add column RECEIVERCODE varchar(10),
add column OFFICECODE varchar(10);

alter table managedinvoice
add column ORIOFFICECODE varchar(10),
add column ORIPARTYCODE varchar(10);

alter table managedgroup
add column RECPARTYCODE varchar(10),
add column ORIPARTYCODE varchar(10);
																
CREATE OR REPLACE VIEW `vwinvoicedcharges` AS
    SELECT 
        `ch`.`CHARGEID` AS `CHARGEID`,
        `wo`.`WORKORDERID` AS `WORKORDERID`,
        `wo`.`ORIGINATORCODE` AS `ORIGINATORCODE`,
        `wo`.`ORIGINATORNAME` AS `ORIGINATORNAME`,
        `wo`.`RECEIVERNAME` AS `RECEIVERNAME`,
        `wo`.`RECEIVERCODE` AS `RECEIVERCODE`,
        `wo`.`WORKORDERNUMBER` AS `WORKORDERNUMBER`,
        `s`.`DESCRIPTION` AS `STATUS`,
        `wo`.`BOOKINGNUMBER` AS `BOOKINGNUMBER`,
        `wo`.`BILLOFLADINGNUMBER` AS `BILLOFLADINGNUMBER`,
        `wo`.`VESSEL` AS `VESSEL`,
        `wo`.`VOYAGE` AS `VOYAGE`,
        `ewo`.`EQUIPMENTNUMBER` AS `EQUIPMENTNUMBER`,
        `ewo`.`EQUIPMENTTYPECODE` AS `EQSIZE`,
        `ewo`.`SHIPMENTNUMBER` AS `SHIPMENTNUMBER`,
        `seq`.`DESCRIPTION` AS `EQUIPMENTSTATUS`,
        `ch`.`TRANSACTIONNUMBER` AS `TRANSACTIONNUMBER`,
        `cs`.`NAME` AS `SERVICE`,
        `ch`.`AMOUNT` AS `AMOUNT`,
        `ch`.`FSCPERCENT` AS `FSCPERCENT`,
        `ch`.`FSCAMOUNT` AS `FSCAMOUNT`,
        (`ch`.`AMOUNT` + COALESCE(`ch`.`FSCAMOUNT`, 0)) AS `SUBTOTAL`,
        `stop`.`NAME` AS `STOPNAME`,
        `wo`.`DATECOMPLETED` AS `COMPLETIONDATE`,
        `wo`.`DATECREATED` AS `DATECREATED`,
        `ch`.`INVOICEABLEDATE` AS `INVOICEABLEDATE`
    FROM
        ((((((`workorder` `wo`
        JOIN `equipmentonworkorder` `ewo` ON ((`wo`.`WORKORDERID` = `ewo`.`WORKORDERID`)))
        JOIN `charge` `ch` ON ((`ch`.`EQUIPMENTWORKORDERID` = `ewo`.`EQUIPMENTONWORKORDERID`)))
        LEFT JOIN `stop` ON ((`stop`.`STOPID` = `ch`.`STOPID`)))
        JOIN `chargeableservices` `cs` ON ((`cs`.`SERVICEID` = `ch`.`SERVICEID`)))
        JOIN `status` `s` ON ((`wo`.`STATUSID` = `s`.`STATUSID`)))
        JOIN `status` `seq` ON ((`ewo`.`STATUSID` = `seq`.`STATUSID`)))
    WHERE
        ((`ch`.`ISBILLABLE` = 1)
            AND (`ch`.`ISINVOICED` = 0)
            AND (`wo`.`STATUSID` NOT IN (7 , 11))
            AND (`ch`.`INVOICEABLEDATE` IS NOT NULL))
    ORDER BY `wo`.`WORKORDERNUMBER`													
																
CREATE OR REPLACE VIEW `vwinvoicedetails` AS
    SELECT 
        `invoice`.`INVOICEID` AS `INVOICEID`,
        `invoice`.`INVOICENUMBER` AS `INVOICENUMBER`,
        `invoice`.`RECEIVERCODE` AS `RECEIVERCODE`,
        `invoice`.`ORIGINATORCODE` AS `ORIGINATORCODE`,
        `invoice`.`FROMRECEIVER` AS `FROMRECEIVER`,
        `invoice`.`BILLTO` AS `BILLTO`,
        `invoice`.`DATECREATED` AS `DATECREATED`,
        `invoice`.`DATESEND` AS `DATESEND`,
        `invoice`.`DATEAPPROVED` AS `DATEAPPROVED`,
        `invoice`.`DATEREJECTED` AS `DATEREJECTED`,
        `invoice`.`DATECOMPLETED` AS `DATECOMPLETED`,
        `invoicestatus`.`DESCRIPTION` AS `STATUS`,
        `invoicedetails`.`INVOICEDETAILSID` AS `INVOICEDETAILSID`,
        `workorder`.`WORKORDERNUMBER` AS `WORKORDERNUMBER`,
        `workorder`.`WORKORDERID` AS `WORKORDERID`,
        `workorder`.`CATEGORY` AS `CATEGORY`,
        `categorytype`.`DESCRIPTION` AS `CATEGORYTYPE`,
        `workorder`.`BOOKINGNUMBER` AS `BOOKINGNUMBER`,
        `workorder`.`BILLOFLADINGNUMBER` AS `BILLOFLADINGNUMBER`,
        `workorder`.`DATECOMPLETED` AS `WOCOMPLETIONDATE`,
        `workorder`.`VENDORNUMBER` AS `VENDORNUMBER`,
        `workorder`.`VESSEL` AS `VESSEL`,
        `workorder`.`VOYAGE` AS `VOYAGE`,
        `invoice`.`EQUIPMENTNUMBERS` AS `EQUIPMENTNUMBERS`,
        `invoicedetails`.`EQUIPMENTNUMBER` AS `EQUIPMENTNUMBER`,
        `invoice`.`REJECTIONREASON` AS `REJECTIONREASON`,
        `equipmentonworkorder`.`EQUIPMENTTYPECODE` AS `EQUIPMENTTYPECODE`,
        `equipmentonworkorder`.`SHIPMENTNUMBER` AS `SHIPMENTNUMBER`,
        `stops`.`ORIGINNAME` AS `ORIGIN`,
        `stops`.`ORIGINCITY` AS `ORIGINCITY`,
        `stops`.`DESTINATIONNAME` AS `DESTINATION`,
        `stops`.`DESTINATIONCITY` AS `DESTINATIONCITY`,
        `chargeableservices`.`NAME` AS `SERVICE`,
        `charge`.`TRANSACTIONNUMBER` AS `TRANSACTIONNUMBER`,
        `charge`.`AMOUNT` AS `AMOUNT`,
        `charge`.`INVOICEABLEDATE` AS `INVOICEABLEDATE`,
        `charge`.`FSCPERCENT` AS `FSCPERCENT`,
        `charge`.`FSCAMOUNT` AS `FSCAMOUNT`,
        (COALESCE(`charge`.`AMOUNT`, 0) + COALESCE(`charge`.`FSCAMOUNT`, 0)) AS `SUBTOTAL`,
        COALESCE(`invoice`.`TOTALAMOUNT`, 0) AS `TOTALAMOUNT`,
        `invoice`.`DATEINVOICERECEIVED` AS `DATEINVOICERECEIVED`,
        `invoice`.`INVOICERECEIVEDAMOUNT` AS `INVOICERECEIVEDAMOUNT`,
        `invoice`.`INVOICERECEIVEDCURRENCY` AS `INVOICERECEIVEDCURRENCY`,
        `invoice`.`DATEPAYMENTREQUESTED` AS `DATEPAYMENTREQUESTED`,
        `invoice`.`PAYMENTREQUESTEDAMOUNT` AS `PAYMENTREQUESTEDAMOUNT`,
        `invoice`.`PAYMENTREQUESTEDCURRENCY` AS `PAYMENTREQUESTEDCURRENCY`,
        `invoice`.`DATEPAYMENTISSUED` AS `DATEPAYMENTISSUED`,
        `invoice`.`PAYMENTISSUEDAMOUNT` AS `PAYMENTISSUEDAMOUNT`,
        `invoice`.`PAYMENTISSUEDCURRENCY` AS `PAYMENTISSUEDCURRENCY`
    FROM
        (((((((((`invoice`
        JOIN `invoicedetails` ON ((`invoice`.`INVOICEID` = `invoicedetails`.`INVOICEID`)))
        JOIN `charge` ON ((`invoicedetails`.`CHARGEID` = `charge`.`CHARGEID`)))
        JOIN `equipmentonworkorder` ON ((`equipmentonworkorder`.`EQUIPMENTONWORKORDERID` = `charge`.`EQUIPMENTWORKORDERID`)))
        JOIN `workorder` ON ((`equipmentonworkorder`.`WORKORDERID` = `workorder`.`WORKORDERID`)))
        JOIN `workorderlookup` `stops` ON ((`stops`.`WORKORDERID` = `workorder`.`WORKORDERID`)))
        JOIN `invoicestatus` ON ((`invoicestatus`.`STATUSID` = `invoice`.`STATUSID`)))
        JOIN `chargeableservices` ON ((`charge`.`SERVICEID` = `chargeableservices`.`SERVICEID`)))
        JOIN `category` ON ((`category`.`ID` = `workorder`.`CATEGORYID`)))
        JOIN `categorytype` ON ((`category`.`TYPE` = `categorytype`.`ID`)))







											













-- //@UNDO


-- 487
alter table attachment drop column MEDIALINK;
alter table attachment drop column MEDIAFILENAME;
alter table attachment drop column TARGETMEDIALINK;
alter table attachment drop column TARGETMEDIAFILENAME;

-- 503
drop function if exists OFFER_CATEGORY;
drop function if exists OFFER_CHECK;

-- 505
ALTER TABLE equipmentonworkorder DROP REEFERTEMP;
ALTER TABLE equipmentonworkorder DROP REEFERTEMPUNIT;
ALTER TABLE X_EQUIPMENTONWORKORDER DROP REEFERTEMP;
ALTER TABLE X_EQUIPMENTONWORKORDER DROP REEFERTEMPUNIT;

-- 506
ALTER TABLE workorderlookup DROP comments;
ALTER TABLE workorderlookup DROP emptyreleasenumber;

-- 507
CREATE OR REPLACE VIEW `VWEQUIPMENTADVANCEDFILTER` (`APPOINTMENTID`, `WORKORDERID`, `EQUIPMENTONWORKORDERID`, `WORKORDERNUMBER`, `ORIGINATOR`, `RECEIVER`, `ORIGINATORNAME`, `RECEIVERNAME`, `CATEGORY`, `CATEGORYTYPE`, `STATUS`, `WORKORDERDATE`, `VESSEL`, `VOYAGE`, `CUTTOFFDATE`, `PORTOFLOADING`, `PORTOFDISCHARGE`, `LASTFREEDAY`, `RESPONDBYDATE`, `DATECREATED`, `DATEACCEPTED`, `DATEASSIGNED`, `DATECOMPLETED`, `DATECANCELED`, `DATEACTIVE`, `SHIPMENTREFERENCENUMBER`, `ORIGINATORIMPORTREFNUMBER`, `EQUIPMENTNUMBER`, `EQUIPMENTTYPECODE`, `ASSOCIATEDUNITID`, `PIECECOUNT`, `STOPNUMBER`, `STOPNAME`, `GISCHEDULETIMEFROM`, `GISCHEDULETIMESTART`, `GISCHEDULETIMEEND`, `GOSCHEDULETIMEFROM`, `GOSCHEDULETIMESTART`, `GOSCHEDULETIMEEND`, `GIACTUALTIME`, `GOACTUALTIME`, `BILLOFLADING`, `BOOKINGNUMBER`, `STOPTYPE`, `CATEGORYID`, `ISINVOICED`, `SCHEDULEDLOCATIONCODE`, `SCHEDULEDLOCATIONCODEQUALIFIER`, `ACTUALLOCATIONCODE`, `ACTUALLOCATIONCODEQUALIFIER`, `GATEINSCHEDULECOMMENTS`, `GATEINACTUALCOMMENTS`, `GATEOUTSCHEDULECOMMENTS`, `GATEOUTACTUALCOMMENTS`, `SHIPMENTNUMBER`, `SEAL`, `EVENTEXCEPTIONID`, `EXCEPTIONFLAG`, `REPORTEDPIECECOUNT`, `DAMAGE`, `EVENTEXCEPTIONCOMMENTS`, `EXCEPTIONREASON`) AS 
  SELECT  /*+ parallel(3) */ DISTINCT APP.APPOINTMENTID APPOINTMENTID,
  WO.WORKORDERID WORKORDERID,
  EWO.EQUIPMENTONWORKORDERID EQUIPMENTONWORKORDERID,
  WO.WORKORDERNUMBER WORKORDERNUMBER,
  WO.ORIGINATORID ORIGINATOR,
  WO.RECEIVERID RECEIVER,
  WO.ORIGINATORNAME ORIGINATORNAME,
  WO.RECEIVERNAME RECEIVERNAME,
  CAT.NAME CATEGORY,
  CATT.DESCRIPTION CATEGORYTYPE,
  ST.DESCRIPTION STATUS,
  WO.WORKORDERDATE WORKORDERDATE,
  WO.VESSEL VESSEL,
  WO.VOYAGE VOYAGE,
  WO.EXPORTCUTOFFDATE CUTTOFFDATE,
  WO.PORTOFLOADING PORTOFLOADING,
  WO.PORTOFDISCHARGE PORTOFDISCHARGE,
  WO.LASTFREEDAY LASTFREEDAY,
  WO.RESPONDBYDATE RESPONDBYDATE,
  WO.DATECREATED DATECREATED,
  WO.DATEACCEPTED DATEACCEPTED,
  WO.DATEASSIGNED DATEASSIGNED,
  WO.DATECOMPLETED DATECOMPLETED,
  WO.DATECANCELED DATECANCELED,
  WO.DATEACTIVE DATEACTIVE,
  WO.SHIPMENTREFERENCENUMBER SHIPMENTREFERENCENUMBER,
  WO.ORIGINATORIMPORTREFNUMBER ORIGINATORIMPORTREFNUMBER,
  EWO.EQUIPMENTNUMBER EQUIPMENTNUMBER,
  EWO.EQUIPMENTTYPECODE EQUIPMENTTYPECODE,
  EWO.ASSOCIATEDUNITID ASSOCIATEDUNITID,
  EWO.PIECECOUNT PIECECOUNT,
  STP.STOPNUMBER STOPNUMBER,
  STP.NAME STOPNAME,
  APP.SCHEDULEDTIMEFORM GISCHEDULETIMEFROM,
  APP.SCHEDULEDTIMESTART GISCHEDULETIMESTART,
  APP.SCHEDULEDTIMEEND GISCHEDULETIMEEND,
  APP.GATEOUTFORM GOSCHEDULETIMEFROM,
  APP.GATEOUTSTART GOSCHEDULETIMESTART,
  APP.GATEOUTEND GOSCHEDULETIMEEND,
  APP.ACTUALTIME GIACTUALTIME,
  APP.GATEOUTACTUAL GOACTUALTIME,
  WO.BILLOFLADINGNUMBER BILLOFLADING,
  WO.BOOKINGNUMBER BOOKINGNUMBER,
  STP.STOPTYPE STOPTYPE,
  CAT.ID CATEGORYID,
  EQV.ISINVOICED ISINVOICED,
  APP.SCHEDULEDLOCATIONCODE,
  APP.SCHEDULEDLOCATIONCODEQUALIFIER,
  APP.ACTUALLOCATIONCODE,
  APP.ACTUALLOCATIONCODEQUALIFIER,
  APP.GATEINSCHEDULECOMMENTS,
  APP.GATEINACTUALCOMMENTS,
  APP.GATEOUTSCHEDULECOMMENTS,
  APP.GATEOUTACTUALCOMMENTS,
  EWO.SHIPMENTNUMBER,
  EWO.SEAL,
  EE.EVENTEXCEPTIONID EVENTEXCEPTIONID,
  CASE 	
	WHEN APP.EXCEPTIONREASON is not NULL	
	THEN 1 	
	ELSE CASE EE.EXCEPTIONTYPE WHEN 'OSD' THEN 1 ELSE 0 END 	
	END EXCEPTIONFLAG,
  EE.PIECECOUNT REPORTEDPIECECOUNT,
  EE.DAMAGE DAMAGE,
  EE.COMMENTS EVENTEXCEPTIONCOMMENTS,
  APP.EXCEPTIONREASON
FROM WORKORDER WO
  LEFT JOIN PARTNERSHIP p on WO.ORIGINATORID = p.organization_dbid AND WO.RECEIVERID = p.organization_partner_dbid
  left join EQUIPMENTONWORKORDER EWO on WO.WORKORDERID = EWO.WORKORDERID
 LEFT JOIN (SELECT DISTINCT EQUIPMENTWORKORDERID, ISINVOICED
  FROM CHARGE
  WHERE ISINVOICED = 1
  ) EQV on EWO.EQUIPMENTONWORKORDERID = EQV.equipmentworkorderid
  left join STOP STP on WO.WORKORDERID = STP.WORKORDERID
  left join APPOINTMENT APP on EWO.EQUIPMENTONWORKORDERID = APP.EQUIPMENTONWORKORDERID AND STP.STOPID = APP.STOPID
  left join STATUS ST on WO.STATUSID = ST.STATUSID AND ST.STATUSID IN (3, 5, 6, 9, 10)
  left join CATEGORY CAT on CAT.ID                     = WO.CATEGORYID
  left join CATEGORYTYPE CATT on CAT.TYPE                  = CATT.ID
 LEFT JOIN EVENTEXCEPTION EE on APP.APPOINTMENTID = EE.APPOINTMENTID
ORDER BY WO.WORKORDERNUMBER;

-- 519
delete from AMENDWORKORDERSTATEDECIDER where ELEMENT_NAME = 'workorderDTO.equipmentWorkOrderDTO.reefertemp';
delete from AMENDWORKORDERSTATEDECIDER where ELEMENT_NAME = 'workorderDTO.equipmentWorkOrderDTO.reefertempunit';

-- 521
delete from ATTACHMENTDOCTYPE where ATTACHMENTDOCTYPEID = 5;
delete from ATTACHMENTDOCTYPE where ATTACHMENTDOCTYPEID = 6;
delete from ATTACHMENTDOCTYPE where ATTACHMENTDOCTYPEID = 7;
delete from ATTACHMENTDOCTYPE where ATTACHMENTDOCTYPEID = 8;

-- 600
drop table if exists MEDIATION_ROUTING;

-- 605
ALTER TABLE shipmentevents drop column eventcomments;

-- 606
CREATE OR REPLACE VIEW `VW_WO_SHIPMENTEVENTS` (`TABLENAME`, `PRIMARYKEY`, `WORKORDERID`, `WORKORDERNUMBER`, `EVENTCODE`, `EVENTNAME`, `EVENTTIME`, `PUBLISHERID`, `PUBLISHERCODE`, `ORIGINATORID`, `ORIGINATORCODE`, `REPORTSOURCE`, `REPORTEDBY`, `CREATEDATE`) AS 

    select 'shipmentevents' as tablename, se.shipmenteventid as primarykey,
    w.workorderid as workorderid, w.workordernumber as workordernumber,
    se.eventcode as eventcode, se.eventname as eventname,
    se.eventtime as eventtime, null as publisherid ,se.publishercode as publishercode,
    se.originatorid as originatorid, se.originatorcode as originatorcode,
    se.reportsource as reportsource, se.reportedby as reportedby,
    se.createdate as createdate
    from shipmentevents se, workorder w
    where se.workordernumber = w.workordernumber
    and se.originatorid = w.originatorid
    and (se.publisherid = w.receiverid or se.publisherid=w.originatorid)
    union
    select 'appointments', ap.appointmentid,
    w.workorderid, w.workordernumber,
    'ACTUAL', s.stoptype,
    ap.actualtime, w.RECEIVERID, (select code from organization  where dbid = w.RECEIVERID ),
    w.originatorid, (select code from organization where dbid = w.originatorid ),
    case (select application_code from userprofile up
    where up.USER_DBID in (select dbid from users where username = ap.lastmodifiedby) limit 1)
    WHEN 'DMS' THEN 'WebClient' WHEN 'DMM' THEN 'Mobile' ELSE 'EDI' END, ap.lastmodifiedby,
    ap.dateactualentered
    from workorder w, stop s, appointment ap
    where w.workorderid = s.workorderid
    and s.stopid = ap.stopid
    and ap.actualtime is not null;
    
-- 607
alter table shipmentevents drop EQUIPMENTTYPECODE;
alter table shipmentevents drop WORKORDERID;

-- 608
ALTER TABLE eventexception DROP exceptionreason ;
ALTER TABLE appointment DROP exceptionreason ;
ALTER TABLE workorderlookup DROP exceptionreason ;
ALTER TABLE shipmentevents DROP exceptionreason ;

-- 612
ALTER TABLE workorderlookup drop haspodattachment; 

 ---613

 ALTER
    ALGORITHM = UNDEFINED 
    DEFINER = `dmsiusr`@`%` 
    SQL SECURITY DEFINER
VIEW `vwequipmentadvancedfilter` AS
    SELECT DISTINCT
        `app`.`APPOINTMENTID` AS `APPOINTMENTID`,
        `wo`.`WORKORDERID` AS `WORKORDERID`,
        `ewo`.`EQUIPMENTONWORKORDERID` AS `EQUIPMENTONWORKORDERID`,
        `wo`.`WORKORDERNUMBER` AS `WORKORDERNUMBER`,
		`wo`.`ORIGINATORCODE` AS `ORIGINATORCODE`,
        `wo`.`RECEIVERCODE` AS `RECEIVERCODE`,
        `wo`.`ORIGINATORNAME` AS `ORIGINATORNAME`,
        `wo`.`RECEIVERNAME` AS `RECEIVERNAME`,
        `cat`.`NAME` AS `CATEGORY`,
        `catt`.`DESCRIPTION` AS `CATEGORYTYPE`,
        `st`.`DESCRIPTION` AS `STATUS`,
        `wo`.`workorderdate` AS `WORKORDERDATE`,
        `wo`.`VESSEL` AS `VESSEL`,
        `wo`.`VOYAGE` AS `VOYAGE`,
        `wo`.`EXPORTCUTOFFDATE` AS `CUTTOFFDATE`,
        `wo`.`PORTOFLOADING` AS `PORTOFLOADING`,
        `wo`.`PORTOFDISCHARGE` AS `PORTOFDISCHARGE`,
        `wo`.`LASTFREEDAY` AS `LASTFREEDAY`,
        `wo`.`RESPONDBYDATE` AS `RESPONDBYDATE`,
        `wo`.`DATECREATED` AS `DATECREATED`,
        `wo`.`DATEACCEPTED` AS `DATEACCEPTED`,
        `wo`.`DATEASSIGNED` AS `DATEASSIGNED`,
        `wo`.`DATECOMPLETED` AS `DATECOMPLETED`,
        `wo`.`DATECANCELED` AS `DATECANCELED`,
        `wo`.`DATEACTIVE` AS `DATEACTIVE`,
        `wo`.`SHIPMENTREFERENCENUMBER` AS `SHIPMENTREFERENCENUMBER`,
        `wo`.`ORIGINATORIMPORTREFNUMBER` AS `ORIGINATORIMPORTREFNUMBER`,
        `ewo`.`EQUIPMENTNUMBER` AS `EQUIPMENTNUMBER`,
        `ewo`.`EQUIPMENTTYPECODE` AS `EQUIPMENTTYPECODE`,
        `ewo`.`ASSOCIATEDUNITID` AS `ASSOCIATEDUNITID`,
        `ewo`.`PIECECOUNT` AS `PIECECOUNT`,
        `stp`.`STOPNUMBER` AS `STOPNUMBER`,
        `stp`.`NAME` AS `STOPNAME`,
        `app`.`SCHEDULEDTIMEFORM` AS `GISCHEDULETIMEFROM`,
        `app`.`SCHEDULEDTIMESTART` AS `GISCHEDULETIMESTART`,
        `app`.`SCHEDULEDTIMEEND` AS `GISCHEDULETIMEEND`,
        `app`.`GATEOUTFORM` AS `GOSCHEDULETIMEFROM`,
        `app`.`GATEOUTSTART` AS `GOSCHEDULETIMESTART`,
        `app`.`GATEOUTEND` AS `GOSCHEDULETIMEEND`,
        `app`.`ACTUALTIME` AS `GIACTUALTIME`,
        `app`.`GATEOUTACTUAL` AS `GOACTUALTIME`,
        `wo`.`BILLOFLADINGNUMBER` AS `BILLOFLADING`,
        `wo`.`BOOKINGNUMBER` AS `BOOKINGNUMBER`,
        `stp`.`STOPTYPE` AS `STOPTYPE`,
        `cat`.`ID` AS `CATEGORYID`,
        `eqv`.`ISINVOICED` AS `ISINVOICED`,
        `app`.`SCHEDULEDLOCATIONCODE` AS `SCHEDULEDLOCATIONCODE`,
        `app`.`SCHEDULEDLOCATIONCODEQUALIFIER` AS `SCHEDULEDLOCATIONCODEQUALIFIER`,
        `app`.`ACTUALLOCATIONCODE` AS `ACTUALLOCATIONCODE`,
        `app`.`ACTUALLOCATIONCODEQUALIFIER` AS `ACTUALLOCATIONCODEQUALIFIER`,
        `app`.`GATEINSCHEDULECOMMENTS` AS `GATEINSCHEDULECOMMENTS`,
        `app`.`GATEINACTUALCOMMENTS` AS `GATEINACTUALCOMMENTS`,
        `app`.`GATEOUTSCHEDULECOMMENTS` AS `GATEOUTSCHEDULECOMMENTS`,
        `app`.`GATEOUTACTUALCOMMENTS` AS `GATEOUTACTUALCOMMENTS`,
        `ewo`.`SHIPMENTNUMBER` AS `SHIPMENTNUMBER`,
        `ewo`.`SEAL` AS `SEAL`,
        `ee`.`EVENTEXCEPTIONID` AS `EVENTEXCEPTIONID`,
        (CASE
            WHEN (`app`.`exceptionreason` IS NOT NULL) THEN 1
            ELSE (CASE `ee`.`EXCEPTIONTYPE`
                WHEN 'OSD' THEN 1
                ELSE 0
            END)
        END) AS `EXCEPTIONFLAG`,
        `ee`.`PIECECOUNT` AS `REPORTEDPIECECOUNT`,
        `ee`.`DAMAGE` AS `DAMAGE`,
        `ee`.`COMMENTS` AS `EVENTEXCEPTIONCOMMENTS`,
        `app`.`exceptionreason` AS `EXCEPTIONREASON`,
        NULL AS `COMMENTS`,
        `wo`.`HOUSEAIRWAYBILLNUMBER` AS `HOUSEAIRWAYBILLNUMBER`,
        `ewo`.`EMPTYRELEASENUMBER` AS `EMPTYRELEASENUMBER`
    FROM
        ((((((((`dmsi`.`workorder` `wo`
        LEFT JOIN `dmsi`.`equipmentonworkorder` `ewo` ON ((`wo`.`WORKORDERID` = `ewo`.`WORKORDERID`)))
        LEFT JOIN (SELECT DISTINCT
            `dmsi`.`charge`.`EQUIPMENTWORKORDERID` AS `EQUIPMENTWORKORDERID`,
                `dmsi`.`charge`.`ISINVOICED` AS `ISINVOICED`
        FROM
            `dmsi`.`charge`
        WHERE
            (`dmsi`.`charge`.`ISINVOICED` = 1)) `eqv` ON ((`ewo`.`EQUIPMENTONWORKORDERID` = `eqv`.`EQUIPMENTWORKORDERID`)))
        LEFT JOIN `dmsi`.`stop` `stp` ON ((`wo`.`WORKORDERID` = `stp`.`WORKORDERID`)))
        LEFT JOIN `dmsi`.`appointment` `app` ON (((`ewo`.`EQUIPMENTONWORKORDERID` = `app`.`EQUIPMENTONWORKORDERID`)
            AND (`stp`.`STOPID` = `app`.`STOPID`))))
        LEFT JOIN `dmsi`.`status` `st` ON (((`wo`.`STATUSID` = `st`.`STATUSID`)
            AND (`st`.`STATUSID` IN (3 , 5, 6, 9, 10)))))
        LEFT JOIN `dmsi`.`category` `cat` ON ((`cat`.`ID` = `wo`.`CATEGORYID`)))
        LEFT JOIN `dmsi`.`categorytype` `catt` ON ((`cat`.`TYPE` = `catt`.`ID`)))
        LEFT JOIN `dmsi`.`eventexception` `ee` ON ((`app`.`APPOINTMENTID` = `ee`.`APPOINTMENTID`)))
    ORDER BY `wo`.`WORKORDERNUMBER`;						   
